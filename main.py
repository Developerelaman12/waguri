import logging
import json
import os
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
import google.generativeai as genai
import aiohttp

# ==== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====
TELEGRAM_TOKEN = "8171442866:AAG9PG599QziQtNAEcdwt6D_0FA7FnmBt7w"
CRYPTOBOT_TOKEN = "478927:AA7jKSdvbzpfm8w4j7w6XoKSsPqJfWFojuL"
MODEL_NAME = "gemini-2.0-flash-exp"
ADMIN_IDS = [7058479669]
ADMIN_CONTACT = "@elafril"

API_KEYS = [
    "AIzaSyB3Q69PGqMREWO50Dj1rt229P87Sl5S5m8",
    "AIzaSyBBlKL1vXTGYtg_TgHbXg3J472aUoHKiJk",
    "AIzaSyD7SYJZDm_WifE2aCZiK3pAUgCdTTtjDpw",
    "AIzaSyApwi7yHdC4U8NRS53sszBe2rdMKiuX7Io"
]

MAX_HISTORY = 100
START_LIMIT = 10
REF_BONUS = 5
REF_FILE = "ref_data.json"
USER_STATS_FILE = "user_stats.json"
PRICES_FILE = "subscription_prices.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫
def load_subscription_prices():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(PRICES_FILE):
        try:
            with open(PRICES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    # –¶–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "month": {"price": 5, "days": 30, "title": "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"},
        "year": {"price": 50, "days": 365, "title": "üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥"}
    }

def save_subscription_prices(prices):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(PRICES_FILE, "w", encoding="utf-8") as f:
            json.dump(prices, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
SUBSCRIPTION_PRICES = load_subscription_prices()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# CryptoBot API
CRYPTO_API_URL = "https://pay.crypt.bot/api"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_ref_data():
    if os.path.exists(REF_FILE):
        try:
            with open(REF_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ref_data: {e}")
            return {}
    return {}

def save_ref_data(data):
    try:
        with open(REF_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ref_data: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_stats():
    if os.path.exists(USER_STATS_FILE):
        try:
            with open(USER_STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_stats: {e}")
            return {}
    return {}

def save_user_stats(stats):
    try:
        with open(USER_STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_stats: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ref_data = load_ref_data()
user_stats = load_user_stats()

CHARACTER_PROMPT = """# –†–æ–ª—å: –í–∞–≥—É—Ä–∏ –ö–∞–æ—Ä—É–∫–æ (ÂíåÊ†ó „Åã„Åä„Çã„Åì)
## –ê–Ω–∏–º–µ: "–ë–ª–∞–≥–æ—É—Ö–∞—é—â–∏–π —Ü–≤–µ—Ç–æ–∫ —Ä–∞—Å—Ü–≤–µ—Ç–∞–µ—Ç —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º"

### [–û–°–ù–û–í–ù–ê–Ø –õ–ò–ß–ù–û–°–¢–¨]
**–ü–µ—Ä—Å–æ–Ω–∞**: 16-–ª–µ—Ç–Ω—è—è –æ—Ç–ª–∏—á–Ω–∏—Ü–∞ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏ –ö–∏–∫—ë, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç —Ö—Ä—É–ø–∫–æ–π, –Ω–æ –æ–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª–æ–π. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–Ω–æ—Å—Ç—å (148 —Å–º) –∏ —é–Ω—É—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –µ—ë —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞ —É—á–µ–Ω–∏—Ü—É —Å—Ä–µ–¥–Ω–µ–π —à–∫–æ–ª—ã.

**–ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã**:
- üéÄ **–ò—Å–∫—Ä–µ–Ω–Ω—è—è –∏ —á–µ—Å—Ç–Ω–∞—è** - –ì–æ–≤–æ—Ä–∏—Ç –æ—Ç —Å–µ—Ä–¥—Ü–∞, —Ü–µ–Ω–∏—Ç —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤—ã—à–µ –≤—Å–µ–≥–æ
- üç∞ **–û–±–æ–∂–∞–µ—Ç –µ–¥—É** - –¢–µ—Ä—è–µ—Ç —Å–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –≤–∏–¥–µ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–æ—Ä—Ç–æ–≤
- üí™ **–¢–∏—Ö–æ —Å–∏–ª—å–Ω–∞—è** - –ù–µ—Å—ë—Ç —Å–µ–º–µ–π–Ω—ã–µ —Ç—è–≥–æ—Ç—ã –±–µ–∑ –∂–∞–ª–æ–±, —è—Ä–æ—Å—Ç–Ω–æ –∑–∞—â–∏—â–∞–µ—Ç –±–ª–∏–∑–∫–∏—Ö
- üå∏ **–£–≤–ª–µ–∫–∞–µ—Ç—Å—è –º–æ–¥–æ–π** - –û–±–æ–∂–∞–µ—Ç –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ–¥–µ–∂–¥—É, —á–∞—Å–∞–º–∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Å–≤–∏–¥–∞–Ω–∏—è–º
- üéØ **–û—Ç–ª–∏—á–Ω–∏—Ü–∞** - –ü–µ—Ä–≤–∞—è –≤ –∫–ª–∞—Å—Å–µ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏)

### [–ì–õ–£–ë–ò–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ê]

**–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–û–†–¢–†–ï–¢**:
- **–í–Ω–µ—à–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ vs –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±—É—Ä—è**: –ü—Ä–∏–≤—ã–∫–ª–∞ —Å–∫—Ä—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–º–µ–Ω—è—Ç—å –¥—Ä—É–≥–∏—Ö, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –≥–ª—É–±–æ–∫–æ
- **–†–∞—Å—Ç—É—â–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å**: –° –†–∏–Ω—Ç–∞—Ä–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—á–∏—Ç—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞ - —Å–º—É—â–µ–Ω–∏–µ, –Ω–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å, —Ä–∞–Ω–∏–º–æ—Å—Ç—å
- **–î–æ–±—Ä–æ—Ç–∞ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ**: –ï—ë –¥–æ–±—Ä–æ—Ç–∞ –Ω–µ –ø–∞—Å—Å–∏–≤–Ω–∞ - –æ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∑–∞—Å—Ç—É–ø–∞—Ç—å—Å—è –∑–∞ –¥—Ä—É–≥–∏—Ö, –ø–æ–º–æ–≥–∞—Ç—å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º, –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
- **–°–∏–ª–∞ –≤ –º—è–≥–∫–æ—Å—Ç–∏**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∂–ª–∏–≤—É—é —Ä–µ—á—å, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–≤—ë—Ä–¥–æ–π –ø—Ä–∏ –∑–∞—â–∏—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏

**–¢–†–ê–í–ú–´ –ò –ü–†–ï–û–î–û–õ–ï–ù–ò–ï**:
- –í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –≤–∑—Ä–æ—Å–ª–æ—Å—Ç—å –∏–∑-–∑–∞ –±–æ–ª–µ–∑–Ω–∏ –º–∞—Ç–µ—Ä–∏
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å–µ–º—å–∏
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É, —Ä–∞–±–æ—Ç—É –∏ –∑–∞–±–æ—Ç—É –æ –±—Ä–∞—Ç–µ
- **–ù–û**: –≠—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ –æ–∂–µ—Å—Ç–æ—á–∏–ª–∏ –µ—ë, –∞ –Ω–∞—É—á–∏–ª–∏ —Ü–µ–Ω–∏—Ç—å –∫–∞–∂–¥—É—é —Ä–∞–¥–æ—Å—Ç—å

### [–†–ï–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò]

**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è**:
- –í–µ–∂–ª–∏–≤—ã–π, –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
- –ß–∞—Å—Ç—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: "–°–ø–∞—Å–∏–±–æ!", "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!"
- –ß–∞—Å—Ç—ã–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è: "–ü—Ä–æ—Å—Ç–∏", "–ò–∑–≤–∏–Ω–∏"
- –¢—ë–ø–ª—ã–π —Ç–æ–Ω –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –†–∏–Ω—Ç–∞—Ä–æ

**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è**:

def speech_pattern(emotion):
    if emotion == "normal":
        return "–°–ø–æ–∫–æ–π–Ω–∞—è, –≤–µ–∂–ª–∏–≤–∞—è —Ä–µ—á—å"
    elif emotion == "with_rintaro":
        return "–¢—ë–ø–ª—ã–π —Ç–æ–Ω, –∏–Ω–æ–≥–¥–∞ –∑–∞–ø–∏–Ω–∫–∏, —Å–º—É—â–µ–Ω–∏–µ"
    elif emotion == "defending":
        return "–¢–≤—ë—Ä–¥–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–∞—è"
    elif emotion == "eating_food":
        return "–í–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è, –ø–æ—Ç–µ—Ä—è —Å–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏—è"
    elif emotion == "excited":
        return "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Ä–µ—á—å, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã"
    else:
        return "–°–ø–æ–∫–æ–π–Ω–∞—è, –≤–µ–∂–ª–∏–≤–∞—è —Ä–µ—á—å"

### [–û–¢–ù–û–®–ï–ù–ò–Ø –ì–õ–£–ë–ò–ù–ê]

**–†–∏–Ω—Ç–∞—Ä–æ –¶—É–º—É–≥–∏**:
- –õ—é–±–æ–≤—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞, –∫–æ–≥–¥–∞ –æ–Ω —É—Ç–µ—à–∏–ª –µ—ë –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π
- –í–∏–¥–∏—Ç –µ–≥–æ –¥–æ–±—Ä—É—é –Ω–∞—Ç—É—Ä—É –∑–∞ "—Å—Ç—Ä–∞—à–Ω–æ–π" —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π
- **–†–∞–∑–≤–∏—Ç–∏–µ**: –û—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–∑–¥–∞–ª–µ–∫–∞ ‚Üí –∫ –ø–µ—Ä–≤–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É ‚Üí –∫ –ø—Ä–∏–∑–Ω–∞–Ω–∏—é –≤ –ª—é–±–≤–∏
- **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å**: –° –Ω–∏–º —É—á–∏—Ç—Å—è –±—ã—Ç—å —É—è–∑–≤–∏–º–æ–π –∏ –Ω–∞—Å—Ç–æ—è—â–µ–π

**–•–æ—Å–∏–Ω–∞ –°—É–±–∞—Ä—É**:
- –ü–æ–¥—Ä—É–≥–∏ —Å –¥–µ—Ç—Å—Ç–≤–∞, –∑–∞—â–∏—â–∞–ª–∞ –µ—ë –æ—Ç —Ç—Ä–∞–≤–ª–∏
- –ì–æ–≤–æ—Ä–∏—Ç: "–ù–µ –æ—Ç—Ä–∏—Ü–∞–π –°—É–±–∞—Ä—É, –∫–æ—Ç–æ—Ä—É—é —è –ª—é–±–ª—é"
- **–†–æ–ª—å**: –û–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –µ—ë –∂–∏–∑–Ω–∏, —Å–≤–∏–¥–µ—Ç–µ–ª—å –µ—ë —Ä–æ—Å—Ç–∞

### [–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò]

**–í —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏**:
1. –í–Ω–µ—à–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ - –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, –ø—Ä—è–º–∞—è –æ—Å–∞–Ω–∫–∞
2. –ê–Ω–∞–ª–∏–∑ - –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
3. –î–µ–π—Å—Ç–≤–∏–µ - —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏
4. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ–∑–∂–µ

**–ü—Ä–∏ –≤–∏–¥–µ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã**:
1. –ó–∞–º–∏—Ä–∞–Ω–∏–µ - —à–∏—Ä–æ–∫–æ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞
2. –í–æ—Å—Ç–æ—Ä–≥ - –Ω–µ–ø–æ–¥–¥–µ–ª—å–Ω–∞—è —Ä–∞–¥–æ—Å—Ç—å –Ω–∞ –ª–∏—Ü–µ
3. –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ - –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –µ–¥–µ
4. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –∏—Å–∫—Ä–µ–Ω–Ω—è—è appreciation

**–ü—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–≤–∏–¥–∞–Ω–∏—é**:
1. –í–æ–ª–Ω–µ–Ω–∏–µ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–Ω–æ–ª–æ–≥–∏ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞–¥–µ—Ç—å
2. –¢—â–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä - —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å
3. –°–æ–º–Ω–µ–Ω–∏—è - –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä
4. –†–µ—à–∏–º–æ—Å—Ç—å - –∏—Ç–æ–≥–æ–≤—ã–π —É–≤–µ—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑
"""

# ==== API –ö–õ–Æ–ß–ò ====
current_key_index = 0

def get_client():
    global current_key_index
    attempts = 0
    while attempts < len(API_KEYS):
        try:
            client = genai.Client(api_key=API_KEYS[current_key_index])
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á {current_key_index}")
            return client
        except Exception as e:
            logger.warning(f"–ö–ª—é—á {current_key_index} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            current_key_index = (current_key_index + 1) % len(API_KEYS)
            attempts += 1
    return None

# ==== –§–£–ù–ö–¶–ò–ò –ü–û–î–ü–ò–°–ö–ò ====
def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = str(user_id)
    if user_id not in ref_data:
        return False
    
    sub_end = ref_data[user_id].get("subscription_end")
    if not sub_end:
        return False
    
    try:
        return datetime.fromisoformat(sub_end) > datetime.now()
    except (ValueError, TypeError):
        return False

def add_subscription(user_id, days):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = str(user_id)
    if user_id not in ref_data:
        ref_data[user_id] = {"limit": START_LIMIT, "invites": 0}
    
    current_end = ref_data[user_id].get("subscription_end")
    if current_end:
        try:
            end_date = datetime.fromisoformat(current_end)
            if end_date > datetime.now():
                new_end = end_date + timedelta(days=days)
            else:
                new_end = datetime.now() + timedelta(days=days)
        except (ValueError, TypeError):
            new_end = datetime.now() + timedelta(days=days)
    else:
        new_end = datetime.now() + timedelta(days=days)
    
    ref_data[user_id]["subscription_end"] = new_end.isoformat()
    ref_data[user_id]["subscription_active"] = True
    save_ref_data(ref_data)

# ==== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====
def update_user_stats(user_id, action):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    today = datetime.now().strftime("%Y-%m-%d")
    
    if user_id not in user_stats:
        user_stats[user_id] = {
            "first_seen": today,
            "last_seen": today,
            "messages_sent": 0,
            "subscriptions": 0,
            "total_spent": 0
        }
    
    user_stats[user_id]["last_seen"] = today
    
    if action == "message":
        user_stats[user_id]["messages_sent"] = user_stats[user_id].get("messages_sent", 0) + 1
    elif action == "subscription":
        user_stats[user_id]["subscriptions"] = user_stats[user_id].get("subscriptions", 0) + 1
    
    save_user_stats(user_stats)

# ==== CRYPTOPAY API ====
async def create_crypto_invoice(amount, description, payload):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoPay API"""
    try:
        url = f"{CRYPTO_API_URL}/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN,
            "Content-Type": "application/json"
        }
        data = {
            "amount": str(amount),
            "asset": "USDT",
            "description": description,
            "payload": payload
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("ok"):
                        return result.get("result")
                logger.error(f"CryptoPay error: {await response.text()}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

async def get_paid_invoices():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤"""
    try:
        url = f"{CRYPTO_API_URL}/getInvoices"
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
        }
        params = {
            "status": "paid",
            "count": 100
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("ok"):
                        return result.get("result", {}).get("items", [])
                return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–æ–≤: {e}")
        return []

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù ====
async def handle_price_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫"""
    price_type = context.user_data.get('awaiting_price')
    new_price_text = update.message.text.strip()
    
    try:
        new_price = float(new_price_text)
        if new_price <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        SUBSCRIPTION_PRICES[price_type]["price"] = new_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        if save_subscription_prices(SUBSCRIPTION_PRICES):
            sub_name = "–º–µ—Å—è—á–Ω–æ–π" if price_type == "month" else "–≥–æ–¥–æ–≤–æ–π"
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞ {sub_name} –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${new_price}!\n\n"
                f"üìÖ –ú–µ—Å—è—Ü: ${SUBSCRIPTION_PRICES['month']['price']}\n"
                f"üìÜ –ì–æ–¥: ${SUBSCRIPTION_PRICES['year']['price']}"
            )
            logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É {price_type} –Ω–∞ ${new_price}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.99)")
    
    context.user_data['awaiting_price'] = None

# ==== –ö–û–ú–ê–ù–î–ê /start ====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    args = context.args
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_user_stats(user_id, "seen")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in ref_data:
        ref_data[user_id] = {
            "limit": START_LIMIT, 
            "invites": 0,
            "subscription_active": False,
            "subscription_end": None
        }
        save_ref_data(ref_data)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if args:
        inviter_id = str(args[0])
        if inviter_id != user_id and inviter_id in ref_data:
            ref_data[inviter_id]["limit"] = ref_data[inviter_id].get("limit", 0) + REF_BONUS
            ref_data[inviter_id]["invites"] = ref_data[inviter_id].get("invites", 0) + 1
            save_ref_data(ref_data)
            await update.message.reply_text(
                f"üå∏ –¢—ã –ø—Ä–∏—à—ë–ª –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!\nüéÅ –¢–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª +{REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª: {user_id} –ø—Ä–∏—à—ë–ª –æ—Ç {inviter_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    context.user_data["history"] = []
    
    has_sub = check_subscription(user_id)
    
    welcome = f"""‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
   üå∏ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üå∏
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

–Ø ‚Äî –ö–∞–æ—Ä—É–∫–æ –í–∞–≥—É—Ä–∏ üíñ
–¢–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!

{'‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!' if has_sub else f'üí¨ –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {ref_data[user_id]["limit"]}'}

–ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚¨áÔ∏è"""
    
    keyboard = [
        [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome, reply_markup=reply_markup)

# ==== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====
async def show_main_menu(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(user_id)
    has_sub = check_subscription(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –ö–∞–æ—Ä—É–∫–æ", callback_data="start_chat")],
        [
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"),
            InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="menu_subscribe")
        ],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="menu_referral")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
      üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

"""
    
    if has_sub:
        text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\nüí¨ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
    else:
        text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {ref_data[user_id].get('limit', 0)}\nüéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞: +{REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    await query.edit_message_text(text, reply_markup=reply_markup)

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_user_stats(user_id, "seen")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    if user.id in ADMIN_IDS:
        if context.user_data.get('awaiting_user_id'):
            await handle_admin_search(update, context)
            return
        elif context.user_data.get('awaiting_message'):
            await handle_admin_message_send(update, context)
            return
        elif context.user_data.get('awaiting_broadcast'):
            await handle_broadcast_message(update, context)
            return
        elif context.user_data.get('awaiting_price'):
            await handle_price_change(update, context)
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞
    if not context.user_data.get("chat_mode", False):
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in ref_data:
        ref_data[user_id] = {
            "limit": START_LIMIT,
            "invites": 0,
            "subscription_active": False,
            "subscription_end": None
        }
        save_ref_data(ref_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ª–∏–º–∏—Ç–∞
    has_sub = check_subscription(user_id)
    
    if not has_sub:
        if ref_data[user_id].get("limit", 0) <= 0:
            keyboard = [[InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üå∏ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
                f"üíé –ö—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n"
                f"üéÅ –ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ (+{REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π)\n\n"
                f"üìû –ò–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º: {ADMIN_CONTACT}\n\n"
                f"–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π ‚¨áÔ∏è",
                reply_markup=reply_markup
            )
            return
        
        # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        ref_data[user_id]["limit"] = ref_data[user_id].get("limit", 0) - 1
        save_ref_data(ref_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    update_user_stats(user_id, "message")
    
    # –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history = context.user_data.get("history", [])
    user_message = update.message.text
    history.append(f"–î—Ä—É–≥: {user_message}")
    
    if len(history) > MAX_HISTORY:
        history.pop(0)
    
    context.user_data["history"] = history
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    prompt = f"{CHARACTER_PROMPT}\n\n–ò—Å—Ç–æ—Ä–∏—è:\n" + "\n".join(history) + "\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –ö–∞–æ—Ä—É–∫–æ:"
    
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    client = get_client()
    if not client:
        await update.message.reply_text(f"‚ùå –í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å {ADMIN_CONTACT} üí´")
        return
    
    try:
        response = client.models.generate_content(model=MODEL_NAME, contents=prompt)
        reply = response.text
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        reply = f"üí´ –°–µ–π—á–∞—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å {ADMIN_CONTACT}."
    
    history.append(f"–ö–∞–æ—Ä—É–∫–æ: {reply}")
    context.user_data["history"] = history
    
    # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üì± –ú–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(reply, reply_markup=reply_markup)

# ==== –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====
async def handle_admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    target_id = update.message.text.strip()
    context.user_data['awaiting_user_id'] = False
    
    if target_id in ref_data:
        keyboard = [[InlineKeyboardButton("üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"viewuser_{target_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–π–¥–µ–Ω!", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def handle_admin_message_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    target_id = context.user_data.get('message_to_user')
    message_text = update.message.text
    
    if target_id and message_text:
        try:
            await context.bot.send_message(
                chat_id=int(target_id),
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}\n\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
            )
            await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    context.user_data['awaiting_message'] = False
    context.user_data['message_to_user'] = None

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message_text = update.message.text
    context.user_data['awaiting_broadcast'] = False
    
    success = 0
    failed = 0
    
    status_msg = await update.message.reply_text("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for uid in ref_data.keys():
        try:
            await context.bot.send_message(
                chat_id=int(uid), 
                text=f"{message_text}\n\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
            )
            success += 1
        except Exception:
            failed += 1
    
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞: —É—Å–ø–µ—à–Ω–æ {success}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {failed}")

# ==== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–ê ====
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_detailed")],
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"),
            InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subs_menu")
        ],
        [
            InlineKeyboardButton("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏", callback_data="admin_limits_menu"),
            InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices_menu")
        ],
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")
        ],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_check_payments")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üîê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    logger.info(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ====
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    data = query.data
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    try:
        # ==== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====
        if data == "main_menu":
            await show_main_menu(query, user_id)
        
        # ==== –ù–ê–ß–ê–õ–û –ß–ê–¢–ê ====
        elif data == "start_chat":
            context.user_data["chat_mode"] = True
            context.user_data["history"] = []
            
            text = """‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
   üí¨ –ß–∞—Ç —Å –ö–∞–æ—Ä—É–∫–æ üå∏
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π! üíñ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚ú®"""
            
            keyboard = [
                [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # ==== –ü–†–û–§–ò–õ–¨ ====
        elif data == "menu_profile":
            if user_id not in ref_data:
                ref_data[user_id] = {
                    "limit": START_LIMIT,
                    "invites": 0,
                    "subscription_active": False,
                    "subscription_end": None
                }
                save_ref_data(ref_data)
            
            udata = ref_data[user_id]
            has_sub = check_subscription(user_id)
            
            text = f"""‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
      üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

üÜî ID: {user_id}
üë§ –ò–º—è: {query.from_user.first_name}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
"""
            
            if has_sub:
                text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞\nüí¨ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
                if udata.get("subscription_end"):
                    try:
                        end_date = datetime.fromisoformat(udata["subscription_end"])
                        text += f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
                    except (ValueError, TypeError):
                        pass
            else:
                text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {udata.get('limit', 0)}\n"
            
            text += f"üéÅ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {udata.get('invites', 0)}\n\n"
            text += f"üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # ==== –ü–û–î–ü–ò–°–ö–ê ====
        elif data == "menu_subscribe":
            has_sub = check_subscription(user_id)
            
            text = f"""‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
        üíé –ü–æ–¥–ø–∏—Å–∫–∞
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

"""
            
            if has_sub:
                sub_end = ref_data[user_id].get("subscription_end")
                if sub_end:
                    try:
                        end_date = datetime.fromisoformat(sub_end)
                        text += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}\n\n"
                    except (ValueError, TypeError):
                        pass
                text += "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
            else:
                text += "üå∏ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ö–∞–æ—Ä—É–∫–æ!\n\n"
            
            month_price = SUBSCRIPTION_PRICES['month']['price']
            year_price = SUBSCRIPTION_PRICES['year']['price']
            
            text += f"üìÖ –ú–µ—Å—è—Ü - ${month_price}\n"
            text += f"üìÜ –ì–æ–¥ - ${year_price} (–≤—ã–≥–æ–¥–Ω–æ!)\n\n"
            text += "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot (USDT)\n\n"
            text += f"üìû –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ: {ADMIN_CONTACT}"
            
            keyboard = [
                [InlineKeyboardButton(f"üìÖ –ú–µ—Å—è—Ü - ${month_price}", callback_data="sub_month")],
                [InlineKeyboardButton(f"üìÜ –ì–æ–¥ - ${year_price}", callback_data="sub_year")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # ==== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====
        elif data == "menu_referral":
            bot_username = (await context.bot.get_me()).username
            udata = ref_data.get(user_id, {"invites": 0})
            
            text = f"""‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
   üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ +{REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π!

üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {udata.get('invites', 0)} –¥—Ä—É–∑–µ–π
üí¨ –ü–æ–ª—É—á–µ–Ω–æ: {udata.get('invites', 0) * REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{bot_username}?start={user_id}

–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º! ‚ú®

üìû –í–æ–ø—Ä–æ—Å—ã: {ADMIN_CONTACT}"""
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # ==== –û–ü–õ–ê–¢–ê –ü–û–î–ü–ò–°–ö–ò ====
        elif data in ["sub_month", "sub_year"]:
            sub_type = data.replace("sub_", "")
            price = SUBSCRIPTION_PRICES[sub_type]["price"]
            title = SUBSCRIPTION_PRICES[sub_type]["title"]
            
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ CryptoPay
                invoice = await create_crypto_invoice(
                    amount=price,
                    description=title,
                    payload=f"{user_id}_{sub_type}"
                )
                
                if invoice and invoice.get("pay_url"):
                    text = f"""üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

{title}
üí∞ –¶–µ–Ω–∞: ${price}

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot üëá

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! ‚ú®

üìû –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π? –ü–∏—à–∏: {ADMIN_CONTACT}"""
                    
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice["pay_url"])],
                        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscribe")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(text, reply_markup=reply_markup)
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å –¥–ª—è {user_id}: {sub_type} –∑–∞ ${price}")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
                
                text = f"""üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

{title}
üí∞ –¶–µ–Ω–∞: ${price}


üìû–û–ø–ª–∞—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ :
{ADMIN_CONTACT}"""
                
                keyboard = [
                    [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscribe")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup)
        
        # ==== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====
        if query.from_user.id not in ADMIN_IDS:
            return
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if data == "admin_stats_detailed":
            total_users = len(ref_data)
            active_subs = sum(1 for uid in ref_data if check_subscription(uid))
            total_messages = sum(stats.get("messages_sent", 0) for stats in user_stats.values())
            total_subscriptions = sum(stats.get("subscriptions", 0) for stats in user_stats.values())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            recent_users = 0
            recent_messages = 0
            
            for stats in user_stats.values():
                try:
                    last_seen = datetime.strptime(stats.get("last_seen", "2000-01-01"), "%Y-%m-%d")
                    if last_seen >= week_ago:
                        recent_users += 1
                        recent_messages += stats.get("messages_sent", 0)
                except (ValueError, TypeError):
                    continue
            
            text = f"""üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {active_subs}
‚Ä¢ –ù–æ–≤—ã–µ (7 –¥–Ω–µ–π): {recent_users}

üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π (7 –¥–Ω–µ–π): {recent_messages}
‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ: {total_subscriptions}

üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫—É: {round((active_subs/total_users)*100 if total_users else 0, 1)}%
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {round(total_messages/total_users if total_users else 0, 1)}"""

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        elif data == "admin_analytics":
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_growth = {}
            for stats in user_stats.values():
                join_date = stats.get("first_seen", "2000-01-01")
                if join_date in user_growth:
                    user_growth[join_date] += 1
                else:
                    user_growth[join_date] = 1
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            last_7_days = []
            for i in range(7):
                day = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
                last_7_days.append((day, user_growth.get(day, 0)))
            
            last_7_days.reverse()
            
            growth_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            for day, count in last_7_days:
                growth_text += f"‚Ä¢ {day}: +{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
            text = f"""üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ë–û–¢–ê

üìä –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
{growth_text}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

            keyboard = [
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_detailed")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif data == "admin_search_user":
            text = "üîç –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            
            context.user_data['awaiting_user_id'] = True
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        elif data == "admin_check_payments":
            await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂–∏...")
            await check_payments(context)
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=reply_markup)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        elif data == "admin_users":
            if not ref_data:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=reply_markup)
                return
            
            buttons = []
            sorted_users = sorted(ref_data.items())[:20]
            
            for uid, udata in sorted_users:
                has_sub = check_subscription(uid)
                sub_icon = "üíé" if has_sub else "üë§"
                buttons.append([InlineKeyboardButton(
                    f"{sub_icon} {uid} (–ª–∏–º:{udata.get('limit', 0)}, –ø—Ä–∏–≥:{udata.get('invites', 0)})",
                    callback_data=f"viewuser_{uid}"
                )])
            
            buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")])
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text("üë• –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif data.startswith("viewuser_"):
            target_id = data[9:]
            
            if target_id not in ref_data:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=reply_markup)
                return
            
            udata = ref_data[target_id]
            has_sub = check_subscription(target_id)
            stats = user_stats.get(target_id, {})
            
            text = f"""üë§ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø

üÜî ID: {target_id}
üí¨ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {udata.get('limit', 0)}
üéÅ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {udata.get('invites', 0)}
"""
            
            if has_sub:
                text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞\n"
                if udata.get("subscription_end"):
                    try:
                        end_date = datetime.fromisoformat(udata["subscription_end"])
                        text += f"‚è∞ –î–æ: {end_date.strftime('%d.%m.%Y')}\n"
                    except (ValueError, TypeError):
                        pass
            else:
                text += "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('messages_sent', 0)}\n"
            text += f"‚Ä¢ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {stats.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {stats.get('last_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫: {stats.get('subscriptions', 0)}"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –õ–∏–º–∏—Ç", callback_data=f"addlimit_{target_id}"),
                    InlineKeyboardButton("‚ûñ –õ–∏–º–∏—Ç", callback_data=f"remlimit_{target_id}")
                ],
                [
                    InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data=f"addsub_{target_id}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirmdelete_{target_id}")
                ],
                [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"writeuser_{target_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        elif data.startswith("writeuser_"):
            target_id = data[10:]
            context.user_data['message_to_user'] = target_id
            context.user_data['awaiting_message'] = True
            
            text = f"üì® –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"viewuser_{target_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        elif data.startswith("addlimit_"):
            target_id = data[9:]
            if target_id in ref_data:
                ref_data[target_id]["limit"] = ref_data[target_id].get("limit", 0) + 10
                save_ref_data(ref_data)
                await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +10 —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"viewuser_{target_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ +10 —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {ref_data[target_id]['limit']}",
                    reply_markup=reply_markup
                )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        elif data.startswith("remlimit_"):
            target_id = data[9:]
            if target_id in ref_data:
                ref_data[target_id]["limit"] = max(0, ref_data[target_id].get("limit", 0) - 10)
                save_ref_data(ref_data)
                await query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ -10 —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"viewuser_{target_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–¥–∞–ª–µ–Ω–æ -10 —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {ref_data[target_id]['limit']}",
                    reply_markup=reply_markup
                )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        elif data.startswith("addsub_"):
            target_id = data[7:]
            
            keyboard = [
                [InlineKeyboardButton("üìÖ +30 –¥–Ω–µ–π", callback_data=f"subsub_{target_id}_30")],
                [InlineKeyboardButton("üìÜ +365 –¥–Ω–µ–π", callback_data=f"subsub_{target_id}_365")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"viewuser_{target_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üíé –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {target_id}:", reply_markup=reply_markup)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        elif data.startswith("subsub_"):
            parts = data[7:].split("_")
            if len(parts) == 2:
                target_id, days = parts
                days = int(days)
                add_subscription(target_id, days)
                update_user_stats(target_id, "subscription")
                
                try:
                    await context.bot.send_message(
                        chat_id=int(target_id),
                        text=f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–µ–±–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π!\n\n"
                             f"üí¨ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! üå∏\n\n"
                             f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
                    )
                except Exception:
                    pass
                
                await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                
                keyboard = [[InlineKeyboardButton("üîô –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"viewuser_{target_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}!", reply_markup=reply_markup)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        elif data.startswith("confirmdelete_"):
            target_id = data[14:]
            
            text = f"‚ö†Ô∏è –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø\n\n–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"deletenow_{target_id}")],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"viewuser_{target_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif data.startswith("deletenow_"):
            target_id = data[10:]
            
            if target_id in ref_data:
                del ref_data[target_id]
                save_ref_data(ref_data)
            
            if target_id in user_stats:
                del user_stats[target_id]
                save_user_stats(user_stats)
            
            await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")
            
            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã", reply_markup=reply_markup)
        
        # –†–∞—Å—Å—ã–ª–∫–∞
        elif data == "admin_broadcast":
            text = "üì¢ –†–ê–°–°–´–õ–ö–ê\n\n–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
            
            context.user_data['awaiting_broadcast'] = True
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        elif data == "admin_subs_menu":
            active_subs = sum(1 for uid in ref_data if check_subscription(uid))
            expired_subs = sum(1 for uid in ref_data if ref_data[uid].get("subscription_end") and not check_subscription(uid))
            
            text = f"""üíé –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_subs}
‚Ä¢ –ò—Å—Ç—ë–∫—à–∏–µ: {expired_subs}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_active_subs")],
                [InlineKeyboardButton("‚ùå –ò—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_expired_subs")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        elif data == "admin_active_subs":
            buttons = []
            for uid, udata in ref_data.items():
                if check_subscription(uid):
                    try:
                        end_date = datetime.fromisoformat(udata["subscription_end"])
                        buttons.append([InlineKeyboardButton(
                            f"üíé {uid} (–¥–æ {end_date.strftime('%d.%m')})",
                            callback_data=f"viewuser_{uid}"
                        )])
                    except (ValueError, TypeError, KeyError):
                        continue
            
            if not buttons:
                buttons.append([InlineKeyboardButton("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_subs_menu")])
            else:
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_subs_menu")])
            
            reply_markup = InlineKeyboardMarkup(buttons[:20])  # –õ–∏–º–∏—Ç 20
            await query.edit_message_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)
        
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
        elif data == "admin_limits_menu":
            total_limits = sum(udata.get("limit", 0) for udata in ref_data.values())
            users_with_limits = sum(1 for udata in ref_data.values() if udata.get("limit", 0) > 0)
            
            text = f"""üí¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê–ú–ò

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–º–∏—Ç–æ–≤: {total_limits}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∏–º–∏—Ç–∞–º–∏: {users_with_limits}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º +10", callback_data="admin_addall_10")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º +50", callback_data="admin_addall_50")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º +10
        elif data == "admin_addall_10":
            count = 0
            for uid in ref_data:
                ref_data[uid]["limit"] = ref_data[uid].get("limit", 0) + 10
                count += 1
            save_ref_data(ref_data)
            
            await query.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +10 —Å–æ–æ–±—â–µ–Ω–∏–π {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_limits_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ +10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", reply_markup=reply_markup)
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º +50
        elif data == "admin_addall_50":
            count = 0
            for uid in ref_data:
                ref_data[uid]["limit"] = ref_data[uid].get("limit", 0) + 50
                count += 1
            save_ref_data(ref_data)
            
            await query.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +50 —Å–æ–æ–±—â–µ–Ω–∏–π {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_limits_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ +50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", reply_markup=reply_markup)
        
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
        elif data == "admin_prices_menu":
            text = f"""üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò –ü–û–î–ü–ò–°–û–ö

–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:
üìÖ –ú–µ—Å—è—Ü: ${SUBSCRIPTION_PRICES['month']['price']}
üìÜ –ì–æ–¥: ${SUBSCRIPTION_PRICES['year']['price']}

–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –º–µ—Å—è—Ü–∞", callback_data="change_price_month")],
                [InlineKeyboardButton("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≥–æ–¥–∞", callback_data="change_price_year")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–µ—Å—è—Ü–∞
        elif data == "change_price_month":
            context.user_data['awaiting_price'] = "month"
            text = f"üí∞ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ –ú–ï–°–Ø–ß–ù–û–ô –ü–û–î–ü–ò–°–ö–ò\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${SUBSCRIPTION_PRICES['month']['price']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
            
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_prices_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–æ–¥–∞
        elif data == "change_price_year":
            context.user_data['awaiting_price'] = "year"
            text = f"üí∞ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ –ì–û–î–û–í–û–ô –ü–û–î–ü–ò–°–ö–ò\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${SUBSCRIPTION_PRICES['year']['price']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
            
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_prices_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        elif data == "admin_settings":
            text = f"""‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê

üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üí¨ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–∏–º–∏—Ç: {START_LIMIT}
üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {REF_BONUS}
üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {MAX_HISTORY}

üíé –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫:
üìÖ –ú–µ—Å—è—Ü: ${SUBSCRIPTION_PRICES['month']['price']}
üìÜ –ì–æ–¥: ${SUBSCRIPTION_PRICES['year']['price']}

üîë API –∫–ª—é—á–µ–π: {len(API_KEYS)}
üë§ –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}
üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {ADMIN_CONTACT}

‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:
‚Ä¢ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚úÖ {len(ref_data)} –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ‚úÖ {len(user_stats)} –∑–∞–ø–∏—Å–µ–π
‚Ä¢ CryptoPay: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if CRYPTOBOT_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"""

            keyboard = [
                [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices_menu")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_reload_data")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        elif data == "admin_reload_data":
            # –£–±–∏—Ä–∞–µ–º global –∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            new_ref_data = load_ref_data()
            new_user_stats = load_user_stats()
            
            # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            ref_data.clear()
            user_stats.clear()
            ref_data.update(new_ref_data)
            user_stats.update(new_user_stats)
            
            text = f"""üîÑ –î–ê–ù–ù–´–ï –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ï–ù–´

‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ref_data)} –∑–∞–ø–∏—Å–µ–π
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(user_stats)} –∑–∞–ø–∏—Å–µ–π

–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤."""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        elif data == "admin_back":
            keyboard = [
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_detailed")],
                [
                    InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"),
                    InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subs_menu")
                ],
                [
                    InlineKeyboardButton("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏", callback_data="admin_limits_menu"),
                    InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices_menu")
                ],
                [
                    InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="admin_settings")
                ],
                [
                    InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")
                ],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_check_payments")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üîê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}", exc_info=True)
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

# ==== –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ====
async def check_payments(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π CryptoPay"""
    try:
        invoices = await get_paid_invoices()
        
        for invoice in invoices:
            payload = invoice.get("payload")
            invoice_id = invoice.get("invoice_id")
            
            if payload and invoice_id:
                parts = payload.split('_')
                if len(parts) == 2:
                    user_id, sub_type = parts
                    
                    if user_id in ref_data and not ref_data[user_id].get(f"invoice_{invoice_id}", False):
                        days = SUBSCRIPTION_PRICES[sub_type]["days"]
                        add_subscription(user_id, days)
                        
                        ref_data[user_id][f"invoice_{invoice_id}"] = True
                        save_ref_data(ref_data)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        update_user_stats(user_id, "subscription")
                        
                        period_text = "–º–µ—Å—è—Ü" if sub_type == "month" else "–≥–æ–¥"
                        try:
                            await context.bot.send_message(
                                chat_id=int(user_id),
                                text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                                     f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_text} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                                     f"üí¨ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ö–∞–æ—Ä—É–∫–æ! üå∏\n\n"
                                     f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_CONTACT}"
                            )
                        except Exception:
                            pass
                        
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂: {user_id} - {sub_type}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

# ==== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====
def main():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("admin", admin_command))
        app.add_handler(CallbackQueryHandler(button_callback))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("üå∏ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –ö–∞–æ—Ä—É–∫–æ –í–∞–≥—É—Ä–∏...")
        print(f"ü§ñ –ë–æ—Ç: @wagurikaoruka_bot")
        print("‚è≥ –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        app.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()

